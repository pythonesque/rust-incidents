var searchIndex = {};
searchIndex['incidents'] = {"items":[[0,"","incidents","Incidents is a library for Rust that explores error handling.  The\nidea is to eventually get an RFC together with the ideas and concepts\nof the library."],[1,"LocationInfo","","This struct provides error location information."],[1,"Traceback","","Encapsulates errors."],[1,"Failure","","A failure wraps an error in a box."],[1,"TraceFormatter","","Formats tracebacks."],[3,"print_traceback","","Print the traceback of a failure."],[4,"FResult","","A result type which wraps the error in a failure."],[6,"Error","","Represents an error."],[9,"name","","The human readable name of the error.",0],[10,"description","","An optional description of the error.",0],[10,"detail","","Optional detail information generated from the error's data.",0],[10,"cause","","Optionally the cause of an error.",0],[6,"ErrorExt","","Adds dynamic helpers to errors."],[9,"is","","Checks if an error is of a specific type.",1],[9,"cast","","Casts an error to a concrete type.",1],[6,"Frame","","Frames are an internal construct in incidents for debugging."],[10,"error","","If the frame points to an error, this returns it.",2],[10,"location","","If the frame contains location information, this returns it.",2],[10,"cause_frame","","If the frame was caused by another frame, this returns a reference\nto it.  This is used if an error gets handled by failing with\nanother error.",2],[10,"previous_frame","","If the frame is linked directly to another frame, this returns a\nreference to it.  This will never be the cause frame.",2],[10,"trace","","If it is possible to construct a trace from this frame, it will\nreturn the error and the trace to it.  Note that this is not always\npossible.",2],[6,"FromError","","A trait for types that can be converted from a given error type `E`."],[9,"from_error","","Perform the conversion.",3],[6,"ConstructFailure","","A trait that is used to construct failures."],[9,"construct_failure","","",4],[10,"eq","","",5],[10,"ne","","",5],[10,"clone","","",5],[10,"new","","Creates a new location info from specific values.",5],[10,"get_source_line","","Returns the source line which caused the error.",5],[10,"file","","Get the filename of this location info.",5],[10,"line","","Get the line number of this location info.",5],[10,"from_failure","","Return the traceback object from a failure.",6],[10,"frame","","Returns the first frame of the traceback.",6],[10,"error","","Returns the error of the traceback.",6],[10,"error_frame","","Returns the frame that contains the error.",6],[10,"error_as","","Returns the error as a pointer to a concrete type.",6],[10,"is","","Checks if the error is of a specific type.",6],[10,"name","","Shorthand to get the name of the error.",6],[10,"description","","Gets the description the error.",6],[10,"detail","","Gets the detail of the error.",6],[10,"traceback","","Returns the traces in this traceback.",6],[10,"deref","","",7],[10,"construct_failure","","",7],[10,"construct_failure","","",7],[10,"construct_failure","","",7],[10,"name","std::io","",8],[10,"description","","",8],[10,"detail","","",8],[10,"new","incidents","Constructs a new trace formatter.",9],[10,"format_fallback_trace","","Formats a fallback trace from an error.",9],[10,"format_traces","","Formats all traces of the incident.",9],[10,"format_frame","","Formats a single frame.",9],[10,"format_cause","","Formats the cause of an error.",9],[15,"fail!","","Fails with an error."],[15,"try!","","Tries to unwrap the result or propagates an error."]],"paths":[[6,"Error"],[6,"ErrorExt"],[6,"Frame"],[6,"FromError"],[6,"ConstructFailure"],[1,"LocationInfo"],[1,"Traceback"],[1,"Failure"],[1,"IoError"],[1,"TraceFormatter"]]};
initSearch(searchIndex);
